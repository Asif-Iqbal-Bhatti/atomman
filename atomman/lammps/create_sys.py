# Standard Python libraries
from __future__ import (absolute_import, print_function,
                        division, unicode_literals)
import os

# http://www.numpy.org/
import numpy as np

# atomman imports
from .run import run
from .atom_dump import load

def create_sys(lammps_command, system_info):
    """
    Uses LAMMPS to generate a System based on the supplied system_info.
    system_info can be generated using atomman.lammps.sys_gen().
    
    Parameters
    ----------
    lammps_command :str
        The lammps command/executable to use.
    system_info : str
        LAMMPS input script command lines associated with creating a new
        system.
    
    Returns
    -------
    atomman.System
        The system generated by LAMMPS.
    """
    # Write a simple LAMMPS script for generating a system
    newline = '\n'
    script = newline.join([system_info,
                           '',
                           'mass * 1',
                           'pair_style none',
                           'atom_modify sort 0 0.0',
                           '',
                           'dump dumpit all custom 100000 temp.dump id type x y z',
                           'run 0'])
    f = open('create_sys.in', 'w')
    f.write(script)
    f.close()
    
    # Run
    output = run(lammps_command, 'create_sys.in')
    
    # Read in resulting system
    system = load('temp.dump')
    
    # Remove script and output files
    os.remove('create_sys.in')
    os.remove('log.lammps')
    os.remove('temp.dump')
    os.remove('temp.dump.json')
    
    return system